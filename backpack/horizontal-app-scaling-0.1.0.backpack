à§Name∂horizontal-app-scalingßVersion•0.1.0¨DependenciesÅ§TODOŸ)http://backpack.qm64.com/example.backpack©TemplatesÜ∞prometheus.nomad≈§am9iICJwcm9tZXRoZXVzIiB7CiAgZGF0YWNlbnRlcnMgPSBbImRjMSJdCgogIGdyb3VwICJwcm9tZXRoZXVzIiB7CiAgICBjb3VudCA9IDEKCiAgICBuZXR3b3JrIHsKICAgICAgcG9ydCAicHJvbWV0aGV1c191aSIge30KICAgIH0KCiAgICB0YXNrICJwcm9tZXRoZXVzIiB7CiAgICAgIGRyaXZlciA9ICJkb2NrZXIiCgogICAgICBjb25maWcgewogICAgICAgIGltYWdlID0gInByb20vcHJvbWV0aGV1czp2Mi4yNS4wIgogICAgICAgIHBvcnRzID0gWyJwcm9tZXRoZXVzX3VpIl0KCiAgICAgICAgIyBVc2UgYGhvc3RgIG5ldHdvcmsgc28gd2UgY2FuIGNvbW11bmljYXRlIHdpdGggdGhlIE5vbWFkIGFuZCBDb25zdWwKICAgICAgICAjIGFnZW50cyBydW5uaW5nIGluIHRoZSBob3N0IGFuZCBzY3JhcGUgdGhlaXIgbWV0cmljcy4KICAgICAgICBuZXR3b3JrX21vZGUgPSAiaG9zdCIKCiAgICAgICAgYXJncyA9IFsKICAgICAgICAgICItLWNvbmZpZy5maWxlPS9ldGMvcHJvbWV0aGV1cy9jb25maWcvcHJvbWV0aGV1cy55bWwiLAogICAgICAgICAgIi0tc3RvcmFnZS50c2RiLnBhdGg9L3Byb21ldGhldXMiLAogICAgICAgICAgIi0td2ViLmxpc3Rlbi1hZGRyZXNzPTAuMC4wLjA6JHtOT01BRF9QT1JUX3Byb21ldGhldXNfdWl9IiwKICAgICAgICAgICItLXdlYi5jb25zb2xlLmxpYnJhcmllcz0vdXNyL3NoYXJlL3Byb21ldGhldXMvY29uc29sZV9saWJyYXJpZXMiLAogICAgICAgICAgIi0td2ViLmNvbnNvbGUudGVtcGxhdGVzPS91c3Ivc2hhcmUvcHJvbWV0aGV1cy9jb25zb2xlcyIsCiAgICAgICAgXQoKICAgICAgICB2b2x1bWVzID0gWwogICAgICAgICAgImxvY2FsL2NvbmZpZzovZXRjL3Byb21ldGhldXMvY29uZmlnIiwKICAgICAgICBdCiAgICAgIH0KCiAgICAgIHRlbXBsYXRlIHsKICAgICAgICBkYXRhID0gPDxFT0gKLS0tCmdsb2JhbDoKICBzY3JhcGVfaW50ZXJ2YWw6ICAgICAxcwogIGV2YWx1YXRpb25faW50ZXJ2YWw6IDFzCgpzY3JhcGVfY29uZmlnczoKICAtIGpvYl9uYW1lOiBoYXByb3h5X2V4cG9ydGVyCiAgICBzdGF0aWNfY29uZmlnczoKICAgICAgLSB0YXJnZXRzOiBbe1sgcmFuZ2Ugc2VydmljZSAiaGFwcm94eS1leHBvcnRlciIgfV0ne1sgLkFkZHJlc3MgfV06e1sgLlBvcnQgfV0nLHtbIGVuZCB9XV0KCiAgLSBqb2JfbmFtZTogbm9tYWRfYXV0b3NjYWxlcgogICAgbWV0cmljc19wYXRoOiAvdjEvbWV0cmljcwogICAgcGFyYW1zOgogICAgICBmb3JtYXQ6IFsncHJvbWV0aGV1cyddCiAgICBzdGF0aWNfY29uZmlnczoKICAgICAgLSB0YXJnZXRzOiBbe1sgcmFuZ2Ugc2VydmljZSAiYXV0b3NjYWxlciIgfV0ne1sgLkFkZHJlc3MgfV06e1sgLlBvcnQgfV0nLHtbIGVuZCB9XV0KCiAgLSBqb2JfbmFtZTogY29uc3VsCiAgICBtZXRyaWNzX3BhdGg6IC92MS9hZ2VudC9tZXRyaWNzCiAgICBwYXJhbXM6CiAgICAgIGZvcm1hdDogWydwcm9tZXRoZXVzJ10KICAgIHN0YXRpY19jb25maWdzOgogICAgLSB0YXJnZXRzOiBbJ3tbIGVudiAiYXR0ci51bmlxdWUubmV0d29yay5pcC1hZGRyZXNzIiB9XTo4NTAwJ10KCiAgLSBqb2JfbmFtZTogbm9tYWQKICAgIG1ldHJpY3NfcGF0aDogL3YxL21ldHJpY3MKICAgIHBhcmFtczoKICAgICAgZm9ybWF0OiBbJ3Byb21ldGhldXMnXQogICAgc3RhdGljX2NvbmZpZ3M6CiAgICAtIHRhcmdldHM6IFsne1sgZW52ICJhdHRyLnVuaXF1ZS5uZXR3b3JrLmlwLWFkZHJlc3MiIH1dOjQ2NDYnXQpFT0gKCiAgICAgICAgY2hhbmdlX21vZGUgICA9ICJzaWduYWwiCiAgICAgICAgbGVmdF9kZWxpbWl0ZXIgPSAie1siIAogICAgICAgIHJpZ2h0X2RlbGltaXRlciA9ICJ9XSIgCiAgICAgICAgY2hhbmdlX3NpZ25hbCA9ICJTSUdIVVAiCiAgICAgICAgZGVzdGluYXRpb24gICA9ICJsb2NhbC9jb25maWcvcHJvbWV0aGV1cy55bWwiCiAgICAgIH0KCiAgICAgIHJlc291cmNlcyB7CiAgICAgICAgY3B1ICAgID0gMTAwCiAgICAgICAgbWVtb3J5ID0gMjU2CiAgICAgIH0KCiAgICAgIHNlcnZpY2UgewogICAgICAgIG5hbWUgPSAicHJvbWV0aGV1cyIKICAgICAgICBwb3J0ID0gInByb21ldGhldXNfdWkiCgogICAgICAgIGNoZWNrIHsKICAgICAgICAgIHR5cGUgICAgID0gImh0dHAiCiAgICAgICAgICBwYXRoICAgICA9ICIvLS9oZWFsdGh5IgogICAgICAgICAgaW50ZXJ2YWwgPSAiMTBzIgogICAgICAgICAgdGltZW91dCAgPSAiMnMiCiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfQp9Cg==¨webapp.nomad≈ am9iICJ3ZWJhcHAiIHsKICBkYXRhY2VudGVycyA9IFsiZGMxIl0KCiAgZ3JvdXAgImRlbW8iIHsKICAgIGNvdW50ID0gMwoKICAgIG5ldHdvcmsgewogICAgICBwb3J0ICJ3ZWJhcHBfaHR0cCIge30KICAgICAgcG9ydCAidG94aXByb3h5X3dlYmFwcCIge30KICAgIH0KCiAgICBzY2FsaW5nIHsKICAgICAgZW5hYmxlZCA9IGZhbHNlCiAgICAgIG1pbiAgICAgPSAxCiAgICAgIG1heCAgICAgPSAyMAoKICAgICAgcG9saWN5IHsKICAgICAgICBjb29sZG93biA9ICIyMHMiCgogICAgICAgIGNoZWNrICJhdmdfaW5zdGFuY2Vfc2Vzc2lvbnMiIHsKICAgICAgICAgIHNvdXJjZSA9ICJwcm9tZXRoZXVzIgogICAgICAgICAgcXVlcnkgID0gImF2ZygoaGFwcm94eV9zZXJ2ZXJfY3VycmVudF9zZXNzaW9uc3tiYWNrZW5kPVwiaHR0cF9iYWNrXCJ9KSBhbmQgKGhhcHJveHlfc2VydmVyX3Vwe2JhY2tlbmQ9XCJodHRwX2JhY2tcIn0gPT0gMSkpIgoKICAgICAgICAgIHN0cmF0ZWd5ICJ0YXJnZXQtdmFsdWUiIHsKICAgICAgICAgICAgdGFyZ2V0ID0gNQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfQoKICAgIHRhc2sgIndlYmFwcCIgewogICAgICBkcml2ZXIgPSAiZG9ja2VyIgoKICAgICAgY29uZmlnIHsKICAgICAgICBpbWFnZSA9ICJoYXNoaWNvcnAvZGVtby13ZWJhcHAtbGItZ3VpZGUiCiAgICAgICAgcG9ydHMgPSBbIndlYmFwcF9odHRwIl0KICAgICAgfQoKICAgICAgZW52IHsKICAgICAgICBQT1JUICAgID0gIiR7Tk9NQURfUE9SVF93ZWJhcHBfaHR0cH0iCiAgICAgICAgTk9ERV9JUCA9ICIke05PTUFEX0lQX3dlYmFwcF9odHRwfSIKICAgICAgfQoKICAgICAgcmVzb3VyY2VzIHsKICAgICAgICBjcHUgICAgPSAxMDAKICAgICAgICBtZW1vcnkgPSAxNgogICAgICB9CiAgICB9CgogICAgdGFzayAidG94aXByb3h5IiB7CiAgICAgIGRyaXZlciA9ICJkb2NrZXIiCgogICAgICBsaWZlY3ljbGUgewogICAgICAgIGhvb2sgICAgPSAicHJlc3RhcnQiCiAgICAgICAgc2lkZWNhciA9IHRydWUKICAgICAgfQoKICAgICAgY29uZmlnIHsKICAgICAgICBpbWFnZSAgICAgID0gInNob3BpZnkvdG94aXByb3h5OjIuMS40IgogICAgICAgIGVudHJ5cG9pbnQgPSBbIi9lbnRyeXBvaW50LnNoIl0KICAgICAgICBwb3J0cyAgICAgID0gWyJ0b3hpcHJveHlfd2ViYXBwIl0KCiAgICAgICAgdm9sdW1lcyA9IFsKICAgICAgICAgICJsb2NhbC9lbnRyeXBvaW50LnNoOi9lbnRyeXBvaW50LnNoIiwKICAgICAgICBdCiAgICAgIH0KCiAgICAgIHRlbXBsYXRlIHsKICAgICAgICBkYXRhID0gPDxFT0gKIyEvYmluL3NoCgpzZXQgLWV4CgovZ28vYmluL3RveGlwcm94eSAtaG9zdCAwLjAuMC4wICAmCgp3aGlsZSAhIHdnZXQgLS1zcGlkZXIgLXEgaHR0cDovL2xvY2FsaG9zdDo4NDc0L3ZlcnNpb247IGRvCiAgZWNobyAidG94aXByb3h5IG5vdCByZWFkeSB5ZXQiCiAgc2xlZXAgMC4yCmRvbmUKCi9nby9iaW4vdG94aXByb3h5LWNsaSBjcmVhdGUgd2ViYXBwIC1sIDAuMC4wLjA6JHtOT01BRF9QT1JUX3RveGlwcm94eV93ZWJhcHB9IC11ICR7Tk9NQURfQUREUl93ZWJhcHBfaHR0cH0KL2dvL2Jpbi90b3hpcHJveHktY2xpIHRveGljIGFkZCAtbiBsYXRlbmN5IC10IGxhdGVuY3kgLWEgbGF0ZW5jeT0xMDAwIC1hIGppdHRlcj01MDAgd2ViYXBwCnRhaWwgLWYgL2Rldi9udWxsCiAgICAgICAgRU9ICgogICAgICAgIGRlc3RpbmF0aW9uID0gImxvY2FsL2VudHJ5cG9pbnQuc2giCiAgICAgICAgcGVybXMgICAgICAgPSAiNzU1IgogICAgICB9CgogICAgICByZXNvdXJjZXMgewogICAgICAgIGNwdSAgICA9IDEwMAogICAgICAgIG1lbW9yeSA9IDMyCiAgICAgIH0KCiAgICAgIHNlcnZpY2UgewogICAgICAgIG5hbWUgPSAid2ViYXBwIgogICAgICAgIHBvcnQgPSAidG94aXByb3h5X3dlYmFwcCIKCiAgICAgICAgY2hlY2sgewogICAgICAgICAgdHlwZSAgICAgICAgICAgPSAiaHR0cCIKICAgICAgICAgIHBhdGggICAgICAgICAgID0gIi8iCiAgICAgICAgICBpbnRlcnZhbCAgICAgICA9ICI1cyIKICAgICAgICAgIHRpbWVvdXQgICAgICAgID0gIjNzIgogICAgICAgICAgaW5pdGlhbF9zdGF0dXMgPSAicGFzc2luZyIKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9Cn0K∞autoscaler.nomad≈<am9iICJhdXRvc2NhbGVyIiB7CiAgdHlwZSA9ICJzZXJ2aWNlIgoKICBkYXRhY2VudGVycyA9IFsiZGMxIl0KCiAgZ3JvdXAgImF1dG9zY2FsZXIiIHsKICAgIGNvdW50ID0gMQoKICAgIG5ldHdvcmsgewogICAgICBwb3J0ICJodHRwIiB7fQogICAgICBwb3J0ICJwcm9tdGFpbCIge30KICAgIH0KCiAgICB0YXNrICJhdXRvc2NhbGVyIiB7CiAgICAgIGRyaXZlciA9ICJkb2NrZXIiCgogICAgICBjb25maWcgewogICAgICAgIGltYWdlICAgPSAiaGFzaGljb3JwL25vbWFkLWF1dG9zY2FsZXI6MC4zLjIiCiAgICAgICAgY29tbWFuZCA9ICJub21hZC1hdXRvc2NhbGVyIgogICAgICAgIHBvcnRzICAgPSBbImh0dHAiXQoKICAgICAgICBhcmdzID0gWwogICAgICAgICAgImFnZW50IiwKICAgICAgICAgICItY29uZmlnIiwKICAgICAgICAgICIke05PTUFEX1RBU0tfRElSfS9jb25maWcuaGNsIiwKICAgICAgICAgICItaHR0cC1iaW5kLWFkZHJlc3MiLAogICAgICAgICAgIjAuMC4wLjAiLAogICAgICAgICAgIi1odHRwLWJpbmQtcG9ydCIsCiAgICAgICAgICAiJHtOT01BRF9QT1JUX2h0dHB9IiwKICAgICAgICBdCiAgICAgIH0KCiAgICAgICMjIEFsdGVybmF0aXZlbHksIHlvdSBjb3VsZCBhbHNvIHJ1biB0aGUgQXV0b3NjYWxlciB1c2luZyB0aGUgZXhlYyBkcml2ZXIKICAgICAgIyBkcml2ZXIgPSAiZXhlYyIKICAgICAgIwogICAgICAjIGNvbmZpZyB7CiAgICAgICMgICBjb21tYW5kID0gIi91c3IvbG9jYWwvYmluL25vbWFkLWF1dG9zY2FsZXIiCiAgICAgICMgICBhcmdzICAgID0gWyJhZ2VudCIsICItY29uZmlnIiwgIiR7Tk9NQURfVEFTS19ESVJ9L2NvbmZpZy5oY2wiXQogICAgICAjIH0KICAgICAgIwogICAgICAjIGFydGlmYWN0IHsKICAgICAgIyAgIHNvdXJjZSAgICAgID0gImh0dHBzOi8vcmVsZWFzZXMuaGFzaGljb3JwLmNvbS9ub21hZC1hdXRvc2NhbGVyLzAuMy4yL25vbWFkLWF1dG9zY2FsZXJfMC4zLjJfbGludXhfYW1kNjQuemlwIgogICAgICAjICAgZGVzdGluYXRpb24gPSAiL3Vzci9sb2NhbC9iaW4iCiAgICAgICMgfQoKICAgICAgdGVtcGxhdGUgewogICAgICAgIGRhdGEgPSA8PEVPRgpub21hZCB7CiAgYWRkcmVzcyA9ICJodHRwOi8ve1tlbnYgImF0dHIudW5pcXVlLm5ldHdvcmsuaXAtYWRkcmVzcyIgfV06NDY0NiIKfQoKdGVsZW1ldHJ5IHsKICBwcm9tZXRoZXVzX21ldHJpY3MgPSB0cnVlCiAgZGlzYWJsZV9ob3N0bmFtZSAgID0gdHJ1ZQp9CgphcG0gInByb21ldGhldXMiIHsKICBkcml2ZXIgPSAicHJvbWV0aGV1cyIKICBjb25maWcgPSB7CiAgICBhZGRyZXNzID0gImh0dHA6Ly97WyBlbnYgImF0dHIudW5pcXVlLm5ldHdvcmsuaXAtYWRkcmVzcyIgfV06OTA5MCIKICB9Cn0KCnN0cmF0ZWd5ICJ0YXJnZXQtdmFsdWUiIHsKICBkcml2ZXIgPSAidGFyZ2V0LXZhbHVlIgp9CiAgICAgICAgICBFT0YKCiAgICAgICAgZGVzdGluYXRpb24gPSAiJHtOT01BRF9UQVNLX0RJUn0vY29uZmlnLmhjbCIKICAgICAgfQoKICAgICAgcmVzb3VyY2VzIHsKICAgICAgICBjcHUgICAgPSA1MAogICAgICAgIG1lbW9yeSA9IDEyOAogICAgICB9CgogICAgICBzZXJ2aWNlIHsKICAgICAgICBuYW1lID0gImF1dG9zY2FsZXIiCiAgICAgICAgcG9ydCA9ICJodHRwIgoKICAgICAgICBjaGVjayB7CiAgICAgICAgICB0eXBlICAgICA9ICJodHRwIgogICAgICAgICAgcGF0aCAgICAgPSAiL3YxL2hlYWx0aCIKICAgICAgICAgIGludGVydmFsID0gIjNzIgogICAgICAgICAgdGltZW91dCAgPSAiMXMiCiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgdGFzayAicHJvbXRhaWwiIHsKICAgICAgZHJpdmVyID0gImRvY2tlciIKCiAgICAgIGxpZmVjeWNsZSB7CiAgICAgICAgaG9vayAgICA9ICJwcmVzdGFydCIKICAgICAgICBzaWRlY2FyID0gdHJ1ZQogICAgICB9CgogICAgICBjb25maWcgewogICAgICAgIGltYWdlID0gImdyYWZhbmEvcHJvbXRhaWw6MS41LjAiCiAgICAgICAgcG9ydHMgPSBbInByb210YWlsIl0KCiAgICAgICAgYXJncyA9IFsKICAgICAgICAgICItY29uZmlnLmZpbGUiLAogICAgICAgICAgImxvY2FsL3Byb210YWlsLnlhbWwiLAogICAgICAgIF0KICAgICAgfQoKICAgICAgdGVtcGxhdGUgewogICAgICAgIGRhdGEgPSA8PEVPSApzZXJ2ZXI6CiAgaHR0cF9saXN0ZW5fcG9ydDoge1sgZW52ICJOT01BRF9QT1JUX3Byb210YWlsIiB9XQogIGdycGNfbGlzdGVuX3BvcnQ6IDAKCnBvc2l0aW9uczoKICBmaWxlbmFtZTogL3RtcC9wb3NpdGlvbnMueWFtbAoKY2xpZW50OgogIHVybDogaHR0cDovL3tbIHJhbmdlICRpLCAkcyA6PSBzZXJ2aWNlICJsb2tpIiB9XXtbIGlmIGVxICRpIDAgfV17Wy5BZGRyZXNzfV06e1suUG9ydH1de1tlbmR9XXtbZW5kfV0vYXBpL3Byb20vcHVzaAoKc2NyYXBlX2NvbmZpZ3M6Ci0gam9iX25hbWU6IHN5c3RlbQogIGVudHJ5X3BhcnNlcjogcmF3CiAgc3RhdGljX2NvbmZpZ3M6CiAgLSB0YXJnZXRzOgogICAgICAtIGxvY2FsaG9zdAogICAgbGFiZWxzOgogICAgICB0YXNrOiBhdXRvc2NhbGVyCiAgICAgIF9fcGF0aF9fOiAvYWxsb2MvbG9ncy9hdXRvc2NhbGVyKgogIHBpcGVsaW5lX3N0YWdlczoKICAtIG1hdGNoOgogICAgICBzZWxlY3RvcjogJ3t0YXNrPSJhdXRvc2NhbGVyIn0nCiAgICAgIHN0YWdlczoKICAgICAgLSByZWdleDoKICAgICAgICAgIGV4cHJlc3Npb246ICcuKnBvbGljeV9pZD0oP1A8cG9saWN5X2lkPlthLXpBLVowLTlfLV0rKS4qc291cmNlPSg/UDxzb3VyY2U+W2EtekEtWjAtOV8tXSspLipzdHJhdGVneT0oP1A8c3RyYXRlZ3k+W2EtekEtWjAtOV8tXSspLip0YXJnZXQ9KD9QPHRhcmdldD5bYS16QS1aMC05Xy1dKykuKkdyb3VwOig/UDxncm91cD5bYS16QS1aMC05XSspLipKb2I6KD9QPGpvYj5bYS16QS1aMC05Xy1dKykuKk5hbWVzcGFjZTooP1A8bmFtZXNwYWNlPlthLXpBLVowLTlfLV0rKScKICAgICAgLSBsYWJlbHM6CiAgICAgICAgICBwb2xpY3lfaWQ6CiAgICAgICAgICBzb3VyY2U6CiAgICAgICAgICBzdHJhdGVneToKICAgICAgICAgIHRhcmdldDoKICAgICAgICAgIGdyb3VwOgogICAgICAgICAgam9iOgogICAgICAgICAgbmFtZXNwYWNlOgpFT0gKICAgICAgICBsZWZ0X2RlbGltaXRlciA9ICJ7WyIgCiAgICAgICAgcmlnaHRfZGVsaW1pdGVyID0gIn1dIiAKICAgICAgICBkZXN0aW5hdGlvbiA9ICJsb2NhbC9wcm9tdGFpbC55YW1sIgogICAgICB9CgogICAgICByZXNvdXJjZXMgewogICAgICAgIGNwdSAgICA9IDUwCiAgICAgICAgbWVtb3J5ID0gMzIKICAgICAgfQoKICAgICAgc2VydmljZSB7CiAgICAgICAgbmFtZSA9ICJwcm9tdGFpbCIKICAgICAgICBwb3J0ID0gInByb210YWlsIgoKICAgICAgICBjaGVjayB7CiAgICAgICAgICB0eXBlICAgICA9ICJodHRwIgogICAgICAgICAgcGF0aCAgICAgPSAiL3JlYWR5IgogICAgICAgICAgaW50ZXJ2YWwgPSAiMTBzIgogICAgICAgICAgdGltZW91dCAgPSAiMnMiCiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfQp9Cg==≠grafana.nomad≈Lam9iICJncmFmYW5hIiB7CiAgZGF0YWNlbnRlcnMgPSBbImRjMSJdCgogIGdyb3VwICJncmFmYW5hIiB7CiAgICBjb3VudCA9IDEKCiAgICBuZXR3b3JrIHsKICAgICAgcG9ydCAiZ3JhZmFuYV91aSIge30KICAgIH0KCiAgICB2b2x1bWUgImdyYWZhbmEiIHsKICAgICAgdHlwZSAgID0gImhvc3QiCiAgICAgIHNvdXJjZSA9ICJncmFmYW5hIgogICAgfQoKICAgIHRhc2sgImdyYWZhbmEiIHsKICAgICAgZHJpdmVyID0gImRvY2tlciIKCiAgICAgIGNvbmZpZyB7CiAgICAgICAgaW1hZ2UgPSAiZ3JhZmFuYS9ncmFmYW5hOjcuNC4yIgogICAgICAgIHBvcnRzID0gWyJncmFmYW5hX3VpIl0KCiAgICAgICAgdm9sdW1lcyA9IFsKICAgICAgICAgICJsb2NhbC9kYXRhc291cmNlczovZXRjL2dyYWZhbmEvcHJvdmlzaW9uaW5nL2RhdGFzb3VyY2VzIiwKICAgICAgICAgICJsb2NhbC9kYXNoYm9hcmRzOi9ldGMvZ3JhZmFuYS9wcm92aXNpb25pbmcvZGFzaGJvYXJkcyIsCiAgICAgICAgICAiL2hvbWUvdmFncmFudC9ub21hZC1hdXRvc2NhbGVyL2ZpbGVzOi92YXIvbGliL2dyYWZhbmEvZGFzaGJvYXJkcyIsCiAgICAgICAgXQogICAgICB9CgogICAgICBlbnYgewogICAgICAgIEdGX0FVVEhfQU5PTllNT1VTX0VOQUJMRUQgID0gInRydWUiCiAgICAgICAgR0ZfQVVUSF9BTk9OWU1PVVNfT1JHX1JPTEUgPSAiRWRpdG9yIgogICAgICAgIEdGX1NFUlZFUl9IVFRQX1BPUlQgICAgICAgID0gIiR7Tk9NQURfUE9SVF9ncmFmYW5hX3VpfSIKICAgICAgfQoKICAgICAgdGVtcGxhdGUgewogICAgICAgIGRhdGEgPSA8PEVPSAphcGlWZXJzaW9uOiAxCmRhdGFzb3VyY2VzOgotIG5hbWU6IFByb21ldGhldXMKICB0eXBlOiBwcm9tZXRoZXVzCiAgYWNjZXNzOiBwcm94eQogIHVybDogaHR0cDovL3t7IHJhbmdlICRpLCAkcyA6PSBzZXJ2aWNlICJwcm9tZXRoZXVzIiB9fXt7IGlmIGVxICRpIDAgfX17ey5BZGRyZXNzfX06e3suUG9ydH19e3tlbmR9fXt7ZW5kfX0KICBpc0RlZmF1bHQ6IHRydWUKICB2ZXJzaW9uOiAxCiAgZWRpdGFibGU6IGZhbHNlCkVPSAoKICAgICAgICBkZXN0aW5hdGlvbiA9ICJsb2NhbC9kYXRhc291cmNlcy9wcm9tZXRoZXVzLnlhbWwiCiAgICAgIH0KCiAgICAgIHRlbXBsYXRlIHsKICAgICAgICBkYXRhID0gPDxFT0gKYXBpVmVyc2lvbjogMQpkYXRhc291cmNlczoKLSBuYW1lOiBMb2tpCiAgdHlwZTogbG9raQogIGFjY2VzczogcHJveHkKICB1cmw6IGh0dHA6Ly97eyByYW5nZSAkaSwgJHMgOj0gc2VydmljZSAibG9raSIgfX17eyBpZiBlcSAkaSAwIH19e3suQWRkcmVzc319Ont7LlBvcnR9fXt7ZW5kfX17e2VuZH19CiAgaXNEZWZhdWx0OiBmYWxzZQogIHZlcnNpb246IDEKICBlZGl0YWJsZTogZmFsc2UKRU9ICgogICAgICAgIGRlc3RpbmF0aW9uID0gImxvY2FsL2RhdGFzb3VyY2VzL2xva2kueWFtbCIKICAgICAgfQoKICAgICAgdGVtcGxhdGUgewogICAgICAgIGRhdGEgPSA8PEVPSAphcGlWZXJzaW9uOiAxCgpwcm92aWRlcnM6Ci0gbmFtZTogTm9tYWQgQXV0b3NjYWxlcgogIGZvbGRlcjogTm9tYWQKICBmb2xkZXJVaWQ6IG5vbWFkCiAgdHlwZTogZmlsZQogIGRpc2FibGVEZWxldGlvbjogdHJ1ZQogIGVkaXRhYmxlOiBmYWxzZQogIGFsbG93VWlVcGRhdGVzOiBmYWxzZQogIG9wdGlvbnM6CiAgICBwYXRoOiAvdmFyL2xpYi9ncmFmYW5hL2Rhc2hib2FyZHMKRU9ICgogICAgICAgIGRlc3RpbmF0aW9uID0gImxvY2FsL2Rhc2hib2FyZHMvbm9tYWQtYXV0b3NjYWxlci55YW1sIgogICAgICB9CgogICAgICB2b2x1bWVfbW91bnQgewogICAgICAgIHZvbHVtZSAgICAgID0gImdyYWZhbmEiCiAgICAgICAgZGVzdGluYXRpb24gPSAiL3Zhci9saWIvZ3JhZmFuYSIKICAgICAgfQoKICAgICAgcmVzb3VyY2VzIHsKICAgICAgICBjcHUgICAgPSAxMDAKICAgICAgICBtZW1vcnkgPSA2NAogICAgICB9CgogICAgICBzZXJ2aWNlIHsKICAgICAgICBuYW1lID0gImdyYWZhbmEiCiAgICAgICAgcG9ydCA9ICJncmFmYW5hX3VpIgoKICAgICAgICBjaGVjayB7CiAgICAgICAgICB0eXBlICAgICA9ICJodHRwIgogICAgICAgICAgcGF0aCAgICAgPSAiL2FwaS9oZWFsdGgiCiAgICAgICAgICBpbnRlcnZhbCA9ICIxMHMiCiAgICAgICAgICB0aW1lb3V0ICA9ICIycyIKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9Cn0K≠haproxy.nomad≈àam9iICJoYXByb3h5IiB7CiAgZGF0YWNlbnRlcnMgPSBbImRjMSJdCgogIGdyb3VwICJoYXByb3h5IiB7CiAgICBjb3VudCA9IDEKCiAgICBuZXR3b3JrIHsKICAgICAgcG9ydCAid2ViYXBwIiB7CiAgICAgICAgc3RhdGljID0gODAwMAogICAgICB9CgogICAgICBwb3J0ICJwcm9tZXRoZXVzX3VpIiB7CiAgICAgICAgc3RhdGljID0gOTA5MAogICAgICB9CgogICAgICBwb3J0ICJncmFmYW5hX3VpIiB7CiAgICAgICAgc3RhdGljID0gMzAwMAogICAgICB9CgogICAgICBwb3J0ICJoYXByb3h5X3VpIiB7CiAgICAgICAgc3RhdGljID0gMTkzNgogICAgICB9CgogICAgICBwb3J0ICJoYXByb3h5X2V4cG9ydGVyIiB7fQogICAgfQoKICAgIHRhc2sgImhhcHJveHkiIHsKICAgICAgZHJpdmVyID0gImRvY2tlciIKCiAgICAgIGNvbmZpZyB7CiAgICAgICAgaW1hZ2UgPSAiaGFwcm94eToyLjMuNSIKICAgICAgICBwb3J0cyA9IFsid2ViYXBwIiwgImhhcHJveHlfdWkiXQoKICAgICAgICAjIFVzZSBgaG9zdGAgbmV0d29yayBzbyB3ZSBjYW4gY29tbXVuaWNhdGUgd2l0aCB0aGUgQ29uc3VsIGFnZW50CiAgICAgICAgIyBydW5uaW5nIGluIHRoZSBob3N0IHRvIGFjY2VzcyB0aGUgc2VydmljZSBjYXRhbG9nLgogICAgICAgIG5ldHdvcmtfbW9kZSA9ICJob3N0IgoKICAgICAgICB2b2x1bWVzID0gWwogICAgICAgICAgImxvY2FsL2hhcHJveHkuY2ZnOi91c3IvbG9jYWwvZXRjL2hhcHJveHkvaGFwcm94eS5jZmciLAogICAgICAgIF0KICAgICAgfQoKICAgICAgdGVtcGxhdGUgewogICAgICAgIGRhdGEgPSA8PEVPRgpnbG9iYWwKICAgbWF4Y29ubiAyNTYKCmRlZmF1bHRzCiAgIG1vZGUgaHR0cAoKZnJvbnRlbmQgc3RhdHMKICAgYmluZCAqOnt7IGVudiAiTk9NQURfUE9SVF9oYXByb3h5X3VpIiB9fQogICBzdGF0cyB1cmkgLwogICBzdGF0cyBzaG93LWxlZ2VuZHMKICAgbm8gbG9nCgpmcm9udGVuZCBodHRwX2Zyb250CiAgIGJpbmQgKjp7eyBlbnYgIk5PTUFEX1BPUlRfd2ViYXBwIiB9fQogICBkZWZhdWx0X2JhY2tlbmQgaHR0cF9iYWNrCgpmcm9udGVuZCBwcm9tZXRoZXVzX3VpX2Zyb250CiAgIGJpbmQgKjp7eyBlbnYgIk5PTUFEX1BPUlRfcHJvbWV0aGV1c191aSIgfX0KICAgZGVmYXVsdF9iYWNrZW5kIHByb21ldGhldXNfdWlfYmFjawoKZnJvbnRlbmQgZ3JhZmFuYV91aV9mcm9udAogICBiaW5kICo6e3sgZW52ICJOT01BRF9QT1JUX2dyYWZhbmFfdWkiIH19CiAgIGRlZmF1bHRfYmFja2VuZCBncmFmYW5hX3VpX2JhY2sKCmJhY2tlbmQgaHR0cF9iYWNrCiAgICBiYWxhbmNlIHJvdW5kcm9iaW4KICAgIHNlcnZlci10ZW1wbGF0ZSB3ZWJhcHAgMjAgX3dlYmFwcC5fdGNwLnNlcnZpY2UuY29uc3VsIHJlc29sdmVycyBjb25zdWwgcmVzb2x2ZS1vcHRzIGFsbG93LWR1cC1pcCByZXNvbHZlLXByZWZlciBpcHY0IGNoZWNrCgpiYWNrZW5kIHByb21ldGhldXNfdWlfYmFjawogICAgYmFsYW5jZSByb3VuZHJvYmluCiAgICBzZXJ2ZXItdGVtcGxhdGUgcHJvbWV0aGV1c191aSA1IF9wcm9tZXRoZXVzLl90Y3Auc2VydmljZS5jb25zdWwgcmVzb2x2ZXJzIGNvbnN1bCByZXNvbHZlLW9wdHMgYWxsb3ctZHVwLWlwIHJlc29sdmUtcHJlZmVyIGlwdjQgY2hlY2sKCmJhY2tlbmQgZ3JhZmFuYV91aV9iYWNrCiAgICBiYWxhbmNlIHJvdW5kcm9iaW4KICAgIHNlcnZlci10ZW1wbGF0ZSBncmFmYW5hIDUgX2dyYWZhbmEuX3RjcC5zZXJ2aWNlLmNvbnN1bCByZXNvbHZlcnMgY29uc3VsIHJlc29sdmUtb3B0cyBhbGxvdy1kdXAtaXAgcmVzb2x2ZS1wcmVmZXIgaXB2NCBjaGVjawoKcmVzb2x2ZXJzIGNvbnN1bAogIG5hbWVzZXJ2ZXIgY29uc3VsIHt7IGVudiAiYXR0ci51bmlxdWUubmV0d29yay5pcC1hZGRyZXNzIiB9fTo4NjAwCiAgYWNjZXB0ZWRfcGF5bG9hZF9zaXplIDgxOTIKICBob2xkIHZhbGlkIDVzCkVPRgoKICAgICAgICBkZXN0aW5hdGlvbiAgID0gImxvY2FsL2hhcHJveHkuY2ZnIgogICAgICAgIGNoYW5nZV9tb2RlICAgPSAic2lnbmFsIgogICAgICAgIGNoYW5nZV9zaWduYWwgPSAiU0lHVVNSMSIKICAgICAgfQoKICAgICAgcmVzb3VyY2VzIHsKICAgICAgICBjcHUgICAgPSA1MDAKICAgICAgICBtZW1vcnkgPSAxMjgKICAgICAgfQoKICAgICAgc2VydmljZSB7CiAgICAgICAgbmFtZSA9ICJoYXByb3h5LXVpIgogICAgICAgIHBvcnQgPSAiaGFwcm94eV91aSIKCiAgICAgICAgY2hlY2sgewogICAgICAgICAgdHlwZSAgICAgPSAiaHR0cCIKICAgICAgICAgIHBhdGggICAgID0gIi8iCiAgICAgICAgICBpbnRlcnZhbCA9ICIxMHMiCiAgICAgICAgICB0aW1lb3V0ICA9ICIycyIKICAgICAgICB9CiAgICAgIH0KCiAgICAgIHNlcnZpY2UgewogICAgICAgIG5hbWUgPSAiaGFwcm94eS13ZWJhcHAiCiAgICAgICAgcG9ydCA9ICJ3ZWJhcHAiCiAgICAgIH0KICAgIH0KCiAgICB0YXNrICJoYXByb3h5LWV4cG9ydGVyIiB7CiAgICAgIGRyaXZlciA9ICJkb2NrZXIiCgogICAgICBsaWZlY3ljbGUgewogICAgICAgIGhvb2sgICAgPSAicHJlc3RhcnQiCiAgICAgICAgc2lkZWNhciA9IHRydWUKICAgICAgfQoKICAgICAgY29uZmlnIHsKICAgICAgICBpbWFnZSA9ICJwcm9tL2hhcHJveHktZXhwb3J0ZXI6djAuMTAuMCIKICAgICAgICBwb3J0cyA9IFsiaGFwcm94eV9leHBvcnRlciJdCgogICAgICAgIGFyZ3MgPSBbCiAgICAgICAgICAiLS13ZWIubGlzdGVuLWFkZHJlc3MiLAogICAgICAgICAgIjoke05PTUFEX1BPUlRfaGFwcm94eV9leHBvcnRlcn0iLAogICAgICAgICAgIi0taGFwcm94eS5zY3JhcGUtdXJpIiwKICAgICAgICAgICJodHRwOi8vJHtOT01BRF9BRERSX2hhcHJveHlfdWl9Lz9zdGF0cztjc3YiLAogICAgICAgIF0KICAgICAgfQoKICAgICAgcmVzb3VyY2VzIHsKICAgICAgICBjcHUgICAgPSAxMDAKICAgICAgICBtZW1vcnkgPSAzMgogICAgICB9CgogICAgICBzZXJ2aWNlIHsKICAgICAgICBuYW1lID0gImhhcHJveHktZXhwb3J0ZXIiCiAgICAgICAgcG9ydCA9ICJoYXByb3h5X2V4cG9ydGVyIgoKICAgICAgICBjaGVjayB7CiAgICAgICAgICB0eXBlICAgICA9ICJodHRwIgogICAgICAgICAgcGF0aCAgICAgPSAiL21ldHJpY3MiCiAgICAgICAgICBpbnRlcnZhbCA9ICIxMHMiCiAgICAgICAgICB0aW1lb3V0ICA9ICIycyIKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9Cn0K™loki.nomad≈–am9iICJsb2tpIiB7CiAgZGF0YWNlbnRlcnMgPSBbImRjMSJdCgogIGdyb3VwICJsb2tpIiB7CiAgICBjb3VudCA9IDEKCiAgICBuZXR3b3JrIHsKICAgICAgcG9ydCAibG9raSIge30KICAgIH0KCiAgICB0YXNrICJsb2tpIiB7CiAgICAgIGRyaXZlciA9ICJkb2NrZXIiCgogICAgICBjb25maWcgewogICAgICAgIGltYWdlID0gImdyYWZhbmEvbG9raToyLjEuMCIKICAgICAgICBwb3J0cyA9IFsibG9raSJdCgogICAgICAgIGFyZ3MgPSBbCiAgICAgICAgICAiLS1jb25maWcuZmlsZT0vZXRjL2xva2kvY29uZmlnL2xva2kueW1sIiwKICAgICAgICBdCgogICAgICAgIHZvbHVtZXMgPSBbCiAgICAgICAgICAibG9jYWwvY29uZmlnOi9ldGMvbG9raS9jb25maWciLAogICAgICAgIF0KICAgICAgfQoKICAgICAgdGVtcGxhdGUgewogICAgICAgIGRhdGEgPSA8PEVPSAotLS0KYXV0aF9lbmFibGVkOiBmYWxzZQoKc2VydmVyOgogIGh0dHBfbGlzdGVuX3BvcnQ6IHt7IGVudiAiTk9NQURfUE9SVF9sb2tpIiB9fQoKaW5nZXN0ZXI6CiAgbGlmZWN5Y2xlcjoKICAgIGFkZHJlc3M6IDEyNy4wLjAuMQogICAgcmluZzoKICAgICAga3ZzdG9yZToKICAgICAgICBzdG9yZTogaW5tZW1vcnkKICAgICAgcmVwbGljYXRpb25fZmFjdG9yOiAxCiAgICBmaW5hbF9zbGVlcDogMHMKICBjaHVua19pZGxlX3BlcmlvZDogNW0KICBjaHVua19yZXRhaW5fcGVyaW9kOiAzMHMKCnNjaGVtYV9jb25maWc6CiAgY29uZmlnczoKICAtIGZyb206IDIwMjAtMDUtMTUKICAgIHN0b3JlOiBib2x0ZGIKICAgIG9iamVjdF9zdG9yZTogZmlsZXN5c3RlbQogICAgc2NoZW1hOiB2MTEKICAgIGluZGV4OgogICAgICBwcmVmaXg6IGluZGV4XwogICAgICBwZXJpb2Q6IDE2OGgKCnN0b3JhZ2VfY29uZmlnOgogIGJvbHRkYjoKICAgIGRpcmVjdG9yeTogL3RtcC9sb2tpL2luZGV4CgogIGZpbGVzeXN0ZW06CiAgICBkaXJlY3Rvcnk6IC90bXAvbG9raS9jaHVua3MKCmxpbWl0c19jb25maWc6CiAgZW5mb3JjZV9tZXRyaWNfbmFtZTogZmFsc2UKICByZWplY3Rfb2xkX3NhbXBsZXM6IHRydWUKICByZWplY3Rfb2xkX3NhbXBsZXNfbWF4X2FnZTogMTY4aApFT0gKCiAgICAgICAgY2hhbmdlX21vZGUgICA9ICJzaWduYWwiCiAgICAgICAgY2hhbmdlX3NpZ25hbCA9ICJTSUdIVVAiCiAgICAgICAgZGVzdGluYXRpb24gICA9ICJsb2NhbC9jb25maWcvbG9raS55bWwiCiAgICAgIH0KCiAgICAgIHJlc291cmNlcyB7CiAgICAgICAgY3B1ICAgID0gMTAwCiAgICAgICAgbWVtb3J5ID0gMjU2CiAgICAgIH0KCiAgICAgIHNlcnZpY2UgewogICAgICAgIG5hbWUgPSAibG9raSIKICAgICAgICBwb3J0ID0gImxva2kiCgogICAgICAgIGNoZWNrIHsKICAgICAgICAgIHR5cGUgICAgID0gImh0dHAiCiAgICAgICAgICBwYXRoICAgICA9ICIvcmVhZHkiCiAgICAgICAgICBpbnRlcnZhbCA9ICIxMHMiCiAgICAgICAgICB0aW1lb3V0ICA9ICIycyIKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9Cn0K´JobsEvalIDs¿≠DefaultValues≈–IyBXcml0ZSB0aGUgZGVmYXVsdCB2YWx1ZXMgZm9yIHlvdXIgYmFja3BhY2sgaGVyZQojIEl0IGlzIHN0cm9uZ2x5IHN1Z2dlc3RlZCB0byB1c2UgaW5saW5lIGRvY3VtZW50YXRpb24gZm9yIHF1aWNrIGV4cGxhbmF0aW9ucwojIG90aGVyd2lzZSB0aGUgKi5tZCBmaWxlcyBjYW4gYmUgdXNlZCBmb3IgbG9uZ2VyIGRvY3VtZW50YXRpb24uCmRhdGFjZW50ZXJzOgogLSBkYzEKbmdpbng6CiAgIyBIVFRQIGlzIGVuYWJsZWQgYnkgZGVmYXVsdAogIGh0dHA6CiAgICBwb3J0OiA4MAogICMgSFRUUFMgaXMgZGlzYWJsZWQgYnkgZGVmYXVsdAogIGh0dHBzOgogICAgZW5hYmxlOiBmYWxzZQogICAgcG9ydDogNDQzCg==≠DocumentationÅ©README.mdƒIyBIb3cgdG8gZGVwbG95IG5naW54CldyaXRlIGhlcmUgYSBsb25nZXIgZG9jdW1lbnRhdGlvbiBmdWxsIHdpdGggbGlua3MgYW5kIGV4YW1wbGVzIG9yIHRoaW5ncyB0byAKa25vdyB3aGVuIHVwZ3JhZGluZy9kb3duZ3JhZGluZywgdmFsdWVzIGNvbWJpbmF0aW9uLCBldGMsIGV0YyEgCgpIYXZlIGZ1biEg8J+YhCAKØBackpackVersion†